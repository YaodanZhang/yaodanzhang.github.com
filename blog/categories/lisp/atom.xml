<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lisp | Yaodan's Blog]]></title>
  <link href="http://yaodanzhang.com/blog/categories/lisp/atom.xml" rel="self"/>
  <link href="http://yaodanzhang.com/"/>
  <updated>2015-06-28T18:09:36+08:00</updated>
  <id>http://yaodanzhang.com/</id>
  <author>
    <name><![CDATA[Yaodan Zhang (张耀丹)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[函数式编程的基石 - Y Combinator]]></title>
    <link href="http://yaodanzhang.com/blog/2015/06/11/functional-programming-fundamental-y-combinator/"/>
    <updated>2015-06-11T12:39:44+08:00</updated>
    <id>http://yaodanzhang.com/blog/2015/06/11/functional-programming-fundamental-y-combinator</id>
    <content type="html"><![CDATA[<p>本文主要目的是给大家介绍函数式编程中一个非常重要的知识：Y Combinator。包括它是什么，干什么用的，它为什么能够work，它的数学含义以及如何用重构的方式“推倒”他。</p>

<!--more -->


<p>（本文用到的示例代码会用JavaScript和Clojure两种语言来写。）</p>

<h2>它是什么</h2>

<p>Y Combinator也叫做不动点组合子（Fix Point Combinator），是由著名的逻辑学家Haskell Curry发明的（或者说是他发现的）。大家看到这个名字有没有很熟悉的感觉？你猜对了，Haskell语言就是为了纪念他而以他命名的。还有，函数式语言里面著名的柯里化（Currying）也是以他命名的。</p>

<p>我们可以用它来计算一个函数（lambda表达式）的不动点。不知道不动点是什么？翻译成中文来说就是它让我们拥有了在函数式语言里面写递归的能力。</p>

<p>那么问题来了，写个递归很简单嘛，为什么没有它我们就写不了呢？</p>

<h3>Lambda演算</h3>

<p>为了让大家更好的理解这个问题，我们还需要学习一点点lambda演算的知识。本来还想先写一篇文章介绍lambda的，后来发现了<a href="http://liujiacai.net/blog/2014/10/12/lambda-calculus-introduction/">这篇文章</a>。里面的内容很详尽，而且写得比较通俗，不熟悉lambda演算的话可以看看。</p>

<p>当然了，大家以编程语言来理解Y Combinator也可以，但是Church最初提出的lambda演算才是最简洁的，也最容易理解。</p>

<p>看完过后有一点请大家务必牢记在心，并跟我一起默念三遍：“lambda演算中的函数都是匿名函数”，“lambda演算中的函数都是匿名函数”，“lambda演算中的函数都是匿名函数”。</p>

<p>好了，我们步入正题。</p>

<h2>问题的提出</h2>

<p>递归函数，相信大家都会写，我们可以先写一个最简单的递归函数：计算阶乘，然后我们来看看有什么问题：</p>

<p>``` javascript factorial.js
var factorial = function(n) {
  return n == 1 ? 1 : n * factorial(n &ndash; 1);
}</p>

<p>factorial(5); // 120
```</p>

<p>``` clojure factorial.clj
(def factorial
  (fn [n] (if (= n 1) 1</p>

<pre><code>         (* n (factorial (- n 1))))))
</code></pre>

<p>(factorial 5) ; 120
```</p>

<p>我们刚刚说过了，lambda演算中的函数都是匿名函数，也就是说我们定义的函数名都只是语法糖，真正执行的时候其实会代换成这样（根据lambda演算中的β规约）：</p>

<p><code>javascript factorial.js
(function(n) {
  return n == 1 ? 1 : n * factorial(n - 1);
})(5);
</code></p>

<p>``` clojure factorial.clj
((fn [n] (if (= n 1) 1</p>

<pre><code>         (* n (factorial (- n 1)))))
</code></pre>

<p> 5)
```</p>

<p>相信到这里大家就能看到问题了，我们用到的函数是没有定义完整的，也就是说在这里，<code>factorial(n - 1)</code>解释器是没法处理的。</p>

<p>那么，为什么我们在C++和Java这样的语言里面可以这么写呢？因为他们是有！名！字！的，在编译的时候编译器会对每个函数生成一个符号，在调用的地方会保存目标函数的符号引用，在运行的时候就能确定被调用函数的地址了。</p>

<h2>Y Combinator的数学意义</h2>

<p>为了解决这个问题，Curry根据函数的不动点，推导出了Y Combinator，从而在理论上让递归问题有了解决的可能。</p>

<p>我们先来看看什么是一个函数的不动点：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>∀F ∃X &ndash;> FX = X</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这句话的意思是对于任意一个函数<code>F</code>，存在一个<code>X</code>，使得<code>F(X) = X</code>。举个栗子，对于抛物线函数<code>f(x) = x^2</code>，它的不动点有两个，<code>0</code>和<code>1</code>，因为<code>f(0) = 0</code>，<code>f(1) = 1</code>。</p>

<p>在这基础上，Curry定义了这样一个函数：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Y = λf.((λx.f(xx))(λx.f(xx)))</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>他能够达到这样一个目的：对任意的<code>F</code>，都能满足<code>F(YF) = YF</code>。</p>

<h2>Y Combinator的工程意义</h2>

<p>那么这个表达式和我们的递归函数之间有什么关系呢？就这样看确实很难看出他们之间有什么关系，那就先不管他，我们先把递归函数的问题解决了。</p>

<p>我们知道，Lambda演算是与图灵机具有相同计算能力的，那么既然基于图灵机模型发展出来的语言能写递归，我们就应该坚信函数式语言也能写递归。</p>

<p>怎么写？</p>

<p>还是以阶乘为例子，我们可以试着用重构的方式来做。重构之前，我们应该先在心里有个大致的方向：1. 函数要匿名；2. 要尽量通用。</p>

<p>好了，那我们现在就开始重构。</p>

<h3>1. 先写一个“正常”的递归函数</h3>

<p>``` javascript factorial.js
var factorial = function(n) {
  return n == 1 ? 1 : n * factorial(n &ndash; 1);
}</p>

<p>factorial(5); // 120
```</p>

<p>``` clojure factorial.clj
(def factorial
  (fn [n] (if (= n 1) 1</p>

<pre><code>         (* n (factorial (- n 1))))))
</code></pre>

<p>(factorial 5) ; 120
```</p>

<h3>2. 把自己作为参数</h3>

<p>我们说过了上面这个函数式有问题的，问题就在于函数内部的<code>factorial</code>调用是在调用一个还没有定义出来的函数。那么，我们就干脆不让他调用自己了，而是去调用一个已经定义好的函数不就好了吗？那么如何来调用一个定义好了的函数呢？</p>

<p>把自己作为参数传进去嘛。也就是说给<code>factorial</code>函数增加一个参数，这个参数是一个函数，用来计算<code>(n - 1)</code>的递归。代码如下：</p>

<p>``` javascript factorial.js
var factorial = function(f, n) {
  return n == 1 ? 1 : n * f(f, n &ndash; 1);
}</p>

<p>factorial(factorial, 5); // 120
```</p>

<p>``` clojure factorial.clj
(def factorial
  (fn [f n] (if (= n 1) 1</p>

<pre><code>         (* n (f f (- n 1))))))
</code></pre>

<p>(factorial factorial 5) ; 120
```</p>

<h3>3. 柯里化</h3>

<p>我们刚刚的修改让<code>factorial</code>函数有了两个参数，这是不好的。函数式编程里面，我们应该让所有的函数都只有一个参数，这个过程就是上文提到的柯里化。关于他的好处我们就不展开了，有兴趣的同志可以去看看<a href="https://en.wikipedia.org/wiki/Currying">这篇文章</a>。代码如下：</p>

<p>``` javascript factorial.js
var factorial = function(f) {
  return function(n) {</p>

<pre><code>return n == 1 ? 1 : n * f(f)(n - 1);
</code></pre>

<p>  }
}</p>

<p>factorial(factorial)(5); // 120
```</p>

<p>``` clojure factorial.clj
(def factorial
  (fn [f] (fn [n] (if (= n 1) 1</p>

<pre><code>                (* n ((f f) (- n 1)))))))
</code></pre>

<p>((factorial factorial) 5) ; 120
```</p>

<h3>4. 去除重复的自身调用</h3>

<p>我们看到，这两段代码可以工作了，但是还是有个问题，就是调用起来太恶心，<code>factorial(factorial)(n)</code>或者<code>((factorial factorial) n)</code>都把自己传了两遍，我们可以把这段代码抽成一个函数，从而让最终用户的调用更优雅一些。代码如下：</p>

<p>``` javascript factorial.js
var self_invoke = function(f) {
  return f(f);
};</p>

<p>var factorial = self_invoke(function(f) {
  return function(n) {</p>

<pre><code>return n == 1 ? 1 : n * self_invoke(f)(n - 1);
</code></pre>

<p>  };
});</p>

<p>factorial(5); // 120
```</p>

<p>``` clojure factorial.clj
(def self-invoke
  (fn [f] (f f)))</p>

<p>(def factorial
  (self-invoke
   (fn [f]</p>

<pre><code> (fn [n] (if (= n 1) 1
            (* n ((self-invoke f) (- n 1))))))))
</code></pre>

<p>(factorial 5) ; 120
```</p>

<h3>5. Inline</h3>

<p>上面的代码定义了两个函数，其中的<code>self-invoke</code>是用的有名字的调用，我们的重构目标是使用匿名函数，所以这一步比较简单，就是把<code>self-invoke</code>函数inline。代码如下：</p>

<p>``` javascript factorial.js
var factorial = (function(self_invoke) {
  return self_invoke(function(f) {</p>

<pre><code>return function(n) {
  return n == 1 ? 1 : n * self_invoke(f)(n - 1);
};
</code></pre>

<p>  });
})(function(f) {
  return f(f);
});</p>

<p>factorial(5); // 120
```</p>

<p>``` clojure factorial.clj
(def factorial
  ((fn [self-invoke]</p>

<pre><code> (self-invoke
  (fn [f]
    (fn [n]
      (if (= n 1) 1
          (* n ((self-invoke f) (- n 1))))))))
</code></pre>

<p>   (fn [f] (f f))))</p>

<p>(factorial 5) ; 120
```</p>

<h3>6.抽出伪递归</h3>

<p>我们看到，上面这段代码中</p>

<p><code>javascript factorial.js
function(n) {
  return n == 1 ? 1 : n * self_invoke(f)(n - 1);
};
</code></p>

<p>``` clojure factorial.clj
(fn [n]
  (if (= n 1) 1</p>

<pre><code>  (* n ((self-invoke f) (- n 1)))))
</code></pre>

<p>```</p>

<p>这个结构跟我们最开始的递归函数很像，唯一的区别是这里用<code>self_invoke(f)</code>代替了递归函数中的函数名调用。那么我们可以试着把这一点再抽出来，写出我们最开始的递归函数的样子：</p>

<p>``` javascript factorial.js
(function(self){
  return function(n) {</p>

<pre><code>return n == 1 ? 1 : n * self(n - 1);
</code></pre>

<p>  };
})(function(m) {
  return self_invoke(f)(m);
}));
```</p>

<p>``` clojure factorial.clj
((fn [self]
  (fn [n]</p>

<pre><code>(if (= n 1) 1
    (* n (self (- n 1)))))
</code></pre>

<p> (fn [m] ((self-invoke f) m)))
```</p>

<p>这样我们就能很清楚的看到，这一部分代码：</p>

<p>``` javascript factorial.js
function(self){
  return function(n) {</p>

<pre><code>return n == 1 ? 1 : n * self(n - 1);
</code></pre>

<p>  };
}
```</p>

<p>``` clojure factorial.clj
(fn [self]
  (fn [n]</p>

<pre><code>(if (= n 1) 1
    (* n (self (- n 1))))))
</code></pre>

<p>```</p>

<p>简直跟我们直接写出来的递归函数“一摸一样”，唯一的区别是这里增加了一层函数（参数是self）。很明显，如果我们写了一个直接递归的阶乘函数，我们可以很容易的把这个函数改写成上面的样子。更进一步，如果我们写了任意一个递归函数，我们也能很轻易的把它改写成上面的样子。我们把这个函数就叫做<code>伪递归函数</code>。</p>

<p>这个<code>伪递归函数</code>在我们推导过程中是一个<code>可变量</code>，如果能够把它提取出来，那么剩下的就是<code>不变量</code>。也就是说，我们可以把这个<code>不变量</code>应用到任何一个<code>伪递归函数</code>上面，就能得到我们真正可以递归的函数了。</p>

<p>代码如下：</p>

<p>``` javascript factorial.js
var fake_factorial = function(self) {
  return function(n) {</p>

<pre><code>return n == 1 ? 1 : n * self(n - 1);
</code></pre>

<p>  };
}</p>

<p>var y = function(fake_rec) {
  return (function(self_invoke) {</p>

<pre><code>return self_invoke(function(f) {
  return fake_rec(function(m) {
    return self_invoke(f)(m);
  });
});
</code></pre>

<p>  })(function(f) {</p>

<pre><code>return f(f);
</code></pre>

<p>  });
};</p>

<p>var factorial = y(fake_factorial);</p>

<p>factorial(5); // 120
```</p>

<p>``` clojure factorial.clj
(def fake-factorial
  (fn [self]</p>

<pre><code>(fn [n]
  (if (= n 1) 1
      (* n (self (- n 1)))))))
</code></pre>

<p>(def y
  (fn [fake-rec] ((fn [self-invoke]</p>

<pre><code>               (self-invoke
                (fn [f]
                  (fake-rec
                   (fn [m] ((self-invoke f) m))))))
             (fn [f] (f f)))))
</code></pre>

<p>(def factorial
  (y fake-factorial))</p>

<p>(factorial 5) ; 120
```</p>

<p>这里，<code>y</code>是不变量，<code>fake-factorial</code>是变量。将任意的一个伪递归函数作为实参调用<code>y</code>，就能得到真正的递归函数了。这里的<code>y</code>也就是我们的Y Combinator。</p>

<p>这里推导出来的<code>y</code>还是稍显复杂，我们可以再重构一下，变成这样：</p>

<p>``` javascript factorial.js
var y = function(fake_rec) {
  return (function(f) {</p>

<pre><code>return f(f);
</code></pre>

<p>  })(function(f) {</p>

<pre><code>return fake_rec(function(x) {
  return f(f)(x);
});
</code></pre>

<p>  });
};
```</p>

<p>``` clojure factorial.clj
(def y
  (fn [fake-rec]</p>

<pre><code>((fn [f] (f f)) (fn [f]
                 (fake-rec (fn [x] ((f f) x)))))))
</code></pre>

<p>```</p>

<h2>总结</h2>

<p>到这里，<code>Y Combinator</code>就已经推导完了。</p>

<p>回到我们最开始的地方，<code>Y Combinator</code>的数学定义是对任意的<code>F</code>，都能满足<code>F(YF) = YF</code>。结合我们的推导，可以看出，这里的<code>F</code>其实就是我们的<code>伪递归函数</code>，<code>YF</code>其实就是我们真实的递归函数。伪递归函数<code>F</code>和我们真正的递归函数<code>f</code>之间的关系就是<code>F(f) = f</code>。</p>

<h2>致谢</h2>

<p>感谢太君的<a href="http://cuipengfei.me/blog/2013/04/09/make-y/">这篇文章</a>的启发</p>

<h2>Reference</h2>

<ul>
<li><a href="http://mindhacks.cn/2006/10/15/cantor-godel-turing-an-eternal-golden-diagonal/">康托尔、哥德尔、图灵——永恒的金色对角线</a>，刘未鹏。</li>
<li><a href="http://cuipengfei.me/blog/2013/04/09/make-y/">如何一步一步推导出Y Combinator</a>，崔鹏飞。</li>
<li><a href="https://github.com/zhewuzhou/js-y-combinator/blob/master/y-combinator.js">y-combinator.js</a>，周哲武。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp中cons/car/adr的几种实现方式]]></title>
    <link href="http://yaodanzhang.com/blog/2015/03/16/three-implementations-of-cons-in-lisp/"/>
    <updated>2015-03-16T15:38:57+08:00</updated>
    <id>http://yaodanzhang.com/blog/2015/03/16/three-implementations-of-cons-in-lisp</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<p>在Lisp中，<code>cons</code>、<code>car</code>、<code>cdr</code>是三个原始操作符，Lisp在它们（和另外几个原始操作符）的基础上，定义了一个干净、完整的编程语言。关于Lisp的基本概念，有一篇博客写的非常好，强烈推荐大家去读一读：《<a href="http://daiyuwen.freeshell.org/gb/rol/roots_of_lisp.html">Lisp之根源</a>》</p>

<!--more -->


<h3>Lisp中的一般表达式</h3>

<p>Lisp中的表达式一般是长这样的：<code>(op args)</code>。</p>

<p>简单来说，他的构成方式就是用一对括号括起一些元素，形成一个表，用来表达一个过程。其中，在表里最左边的元素<code>op</code>叫做<em>运算符</em>，其他元素（0个或多个）都叫做<em>运算对象</em>。要得到一个表达式的值，就是将运算符描述的过程应用于<em>实际参数</em>，而所谓的<em>实参</em>就是那些运算对象的值。</p>

<p>给大家一些例子就好明白了：</p>

<p><code>clojure lisp expressions
(+ 1 1)  --&gt; 2
(- 2 1)  --&gt; 1
(* 2 3)  --&gt; 6
(/ 2 1)  --&gt; 2
(+ 1 2 3 4)  --&gt; 10
</code></p>

<p>我们把运算符放在所有的运算对象左边，这种形式成为<em>前缀表达式</em>。乍看起来怪怪的，但好处多多，这里就不展开了。</p>

<h3>cons</h3>

<p><code>cons</code>接收两个参数，组成了一个有序对（pair）。这是一个很简单的数据结构，但是由于<code>cons</code>的参数可以是任意类型，那么在这基础上就可以组成各种各样的数据结构了。</p>

<p>基本的有序对：</p>

<p>``` clojure pair
(cons 17 29)</p>

<p>  *
 / \
17 29</p>

<p>```</p>

<p>链表：</p>

<p>``` clojure list
(cons 3 (cons 5 (cons 7 (cons 9 nil))))</p>

<p> <em>&mdash;</em>&mdash;<em>&mdash;</em>&mdash;nil
 |  |  |  |
 3  5  7  9
```</p>

<p>二叉树：</p>

<p>``` clojure tree
(cons (cons 1 2) (cons 3 4))</p>

<p>   *
  / \
 *   *
/ \ / \
1 2 3 4
```</p>

<h3>car/cdr</h3>

<p>对于一个<code>cons</code>组成的有序对，我们可以用<code>car</code>取第一个元素，用<code>cdr</code>取第二个元素。</p>

<p>例子：</p>

<p><code>clojure car &amp; cdr
(car (cons 1 2)) --&gt; 1
(cdr (cons 1 2)) --&gt; 2
</code></p>

<h2>如何实现cons/car/cdr</h2>

<p>在一般的Lisp方言里，由于这三个操作太重要，太原始了，为了效率，一般都是直接实现的。但是我们学习的时候还是可以想想如何自己来实现这三个操作的。</p>

<h3>定义需求</h3>

<p>这三个操作的描述已经在上面了，要实现他们，我们的需求就是：如果用<code>cons</code>把两个元素绑定在一起，那个可以用<code>car</code>和<code>cdr</code>把他们分别提取出来。</p>

<p>那么可以写一个很简单的测试来测我们的实现：</p>

<p>``` clojure cons_test.clj
(deftest cons-test
  (testing &ldquo;test my cons&rdquo;</p>

<pre><code>(is (= (car (cons 17 29)) 17))
(is (= (cdr (cons 17 29)) 29))))
</code></pre>

<p>```</p>

<h3>普通实现</h3>

<p>直接上代码了：</p>

<p>``` clojure cons.clj
(defn cons
  [a, b]
  (fn [m] (if (= m 0) a b)))</p>

<p>(defn car
  [c]
  (c 0))</p>

<p>(defn cdr
  [c]
  (c 1))
```</p>

<p>我们说过了，<code>cons</code>实际上是用来定义一种数据，这个数据由两个元素组成。但是，我们的实现完全没有用到任何的数据结构，只是用过程就把他实现了。</p>

<p>这里面<code>cons</code>操作的结果不是数据，而是一个函数，这里直接返回了一个lambda表达式，当然也可以返回一个有名字的函数，像下面这样：</p>

<p>``` clojure cons.clj
(defn cons
  [a, b]
  (defn dispatch</p>

<pre><code>[m]
(if (= m 0) a b))
</code></pre>

<p>  dispath)
```</p>

<p>比如c的值是<code>(cons 3 4)</code>，那么c实际上是这样一个函数<code>(λ [m] (if (= m 0) 3 4)</code>，他的意思是给一个参数m，如果m的值是0，那么返回3（第一个元素），否则返回4（第二个元素）。再看看我们定义的<code>car</code>，他实际上是将0作为参数调用上面这个函数，结果返回3。<code>cdr</code>也是一样的道理。</p>

<p>这就是一个纯过程的实现，但是这里面m啊，0啊这些东西看起来还是很恶心，于是我们有了另外一个版本。</p>

<h3>文艺实现</h3>

<p>还是先上代码：</p>

<p>```
(defn cons
  [a, b]
  (fn [f] (f a b)))</p>

<p>(defn car
  [c]
  (c (fn [a, b] a)))</p>

<p>(defn cdr
  [c]
  (c (fn [a, b] b)))
```</p>

<p>我们先理解<code>cons</code>。如果c的值是<code>(cons 3 4)</code>，那么c实际上是这样一个函数<code>(λ [f] (f 3 4))</code>，这个函数接收一个函数f作为参数，返回值是以参数[3, 4]调用f的结果。接下来看<code>car</code>，<code>car</code>实际上也是调用c，而这个实参是一个函数<code>(λ [a, b] a)</code>，这个函数接收两个参数，并且返回第一个参数。接下来我们把这个函数代入c，得到的是这样的一个表达式：<code>((λ [f] (f 3 4)) (λ [a, b] a))</code>，由于前面的<code>(λ [f] (f 3 4))</code>是操作符，将后面的实参代入并替换f过后就会得到：<code>((λ [a, b] a) 3 4)</code>，这样再进行一次实参代入，大家就很容易的能看出结果应该是3了。<code>cdr</code>也是一样的道理。</p>

<h3>二逼实现</h3>

<p>如果限定一下，<code>cons</code>的参数只能是非负整数，那么还可以用这样的方式来定义：<code>(cons a b) --&gt; 2^a * 3^b</code>，即用2的a次方和3的b次方的乘积表示。那么只需要将<code>cons</code>结果对2和3进行质因子分界，就能得到<code>car</code>和<code>cdr</code>。</p>

<p>代码在这里：</p>

<p>```
(defn cons
  [a, b]</p>

<p>  (defn sqr</p>

<pre><code>[x, n]
(cond (= n 0) 1
      (= n 1) x
      (&gt; n 1) (* x (sqr x (- n 1)))
      :else (throw (.IllegalArgumentException "wrong param"))))
</code></pre>

<p>  (* (sqr 2 a) (sqr 3 b)))</p>

<p>(defn factor
  [x, a]</p>

<p>  (defn iter</p>

<pre><code>[x, n]
(if (= 0 (mod x a)) (iter (/ x a) (+ n 1))
    n))
</code></pre>

<p>  (iter x 0))</p>

<p>(defn car
  [c]
  (factor c 2))</p>

<p>(defn cdr
  [c]
  (factor c 3))
```</p>

<h2>总结</h2>

<p><code>cons</code>的这几种实现方式体现的其实就是在Lisp中对数据进行抽象的方式。我们用的是完全过程化的方式，过程的这种使用方法和我们关于数据应该是什么样的直观认识大相径庭。</p>

<p>把过程当作对象去操作，这为我们提供了一种表示复杂数据的能力。</p>
]]></content>
  </entry>
  
</feed>
